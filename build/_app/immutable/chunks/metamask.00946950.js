import{b as c}from"./browser.f1978947.js";import{d as l,i as d,k as m,s as p,b as w,r as u}from"./stores.c1946089.js";import"./index.1ba1bd69.js";import"./ProgressBar.svelte_svelte_type_style_lang.dd8f6209.js";import{w as h}from"./index.b3b988f7.js";function y(){const{subscribe:e,set:t,update:r}=h([]);return{subscribe:e,set:t,update:r,trigger:s=>r(a=>(a.push(s),a)),close:()=>r(s=>(s.length>0&&s.shift(),s)),clear:()=>t([])}}const g=y(),b={type:"alert",title:"No Wallet Detected",body:`
		<p>Please install a Secret Network wallet<p>
	`,buttonTextCancel:"OK",modalClasses:"variant-ghost-error"},n=l["Secret Network"].chain_id,S=l["Secret Network"].lcd;async function D(){var e;await((e=window.keplr)==null?void 0:e.disable(n)),u()}async function I(){if(!window.keplr)g.trigger(b);else{const e=k=>new Promise(f=>setTimeout(f,k));for(;!window.keplr||!window.keplr.getEnigmaUtils||!window.keplr.getOfflineSignerOnlyAmino;)await e(50);await window.keplr.enable(n),window.keplr.defaultOptions={sign:{preferNoSetFee:!1,disableBalanceCheck:!1}};const t=window.keplr.getOfflineSignerOnlyAmino(n),s=(await t.getAccounts())[0].address,a=new c.SecretNetworkClient({url:S,chainId:n,wallet:t,walletAddress:s,encryptionUtils:window.keplr.getEnigmaUtils(n)}),i=await window.keplr.getKey(n);d.set(!0),m.set(i),p.set(s),w.set(a)}}async function q(e){if(!window.keplr){console.error("Keplr not present");return}try{await window.keplr.suggestToken(n,e)}catch(t){console.log(t)}}async function v(e){if(!window.keplr)return console.error("Keplr not present"),null;try{return await window.keplr.getSecret20ViewingKey(n,e)}catch{return null}}const C={type:"alert",title:"No Wallet Detected",body:`
		<p>Please install a Secret Network wallet<p>
	`,buttonTextCancel:"OK",modalClasses:"variant-ghost-error"},A=l["Secret Network"].chain_id,K=l["Secret Network"].lcd,o=window.ethereum;w.subscribe(e=>e);async function x(){await o.request({method:"eth_requestAccounts"}),u()}async function M(){if(!o)g.trigger(C);else{const e=a=>new Promise(i=>setTimeout(i,a));for(;!window.ethereum;)await e(50);const[t]=await o.request({method:"eth_requestAccounts"}),r=await c.MetaMaskWallet.create(o,t);console.log(r.address);const s=new c.SecretNetworkClient({url:K,chainId:A,wallet:r,walletAddress:r.address});d.set(!0),p.set(r.address),w.set(s)}}export{M as a,x as b,q as c,D as d,v as g,g as m,I as s};
